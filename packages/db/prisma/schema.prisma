// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.String annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  not_before               Int?
  id_token_expires_in      Int?
  profile_info             String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ytConfigs     YtConfig[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YtConfig {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  inputConfig InputConfig
  playlists   Playlist[]
  timers      Timer[]
  isDefault   Boolean
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
}

model Playlist {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  videos             Video[]
  useSpeechSynthesis Boolean
  isGlobal           Boolean
  userId             String?   @db.ObjectId
  ytConfig           YtConfig? @relation(fields: [ytConfigId], references: [id])
  ytConfigId         String?   @db.ObjectId
}

type Timer {
  name      String
  playtime  Int
  isDefault Boolean
}

enum InputSize {
  SM
  MD
  LG
}

enum InputType {
  TOUCH
  MOUSE
  SWITCH
  EYEGAZE
}

type InputConfig {
  fixedCentre  Boolean
  dwellTime    Int
  effectColour String
  borderColour String
  size         InputSize
  type         InputType
}

type Video {
  id          String
  title       String
  description String
  thumbnails  Thumbnails
  timers      VideoTimer[]
}

type Thumbnails {
  medium  Thumbnail
  default Thumbnail
}

type Thumbnail {
  url    String
  width  Int
  height Int
}

type VideoTimer {
  index     Int
  pauseTime Int
  videoTime String
}
